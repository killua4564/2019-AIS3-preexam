import gmpy2
from sympy import invert
from Crypto.Util.number import isPrime, long_to_bytes

# e = 65537
# (enc1,n1) = (1866739590223797894675042930867507244459802734183817120733673558730628194296958093591260416428147300252816258812188827322730714255110909448735060349711514657617017626271999512009288, 2107308938308678911177716445910458064144687266257974485812760737810938658576811949209501139731498151019880482475847630181615827350928419914012994515153701812863112540563758947630673)
# (enc2,n2) = (163248530795584366145466296321187213658026110158596299750743781778743172552595737964301790056072986912490085246953061391284483885257738498665735626767157771907156283098113208436201643983283825273676876772787839238022891031020422513624276707856450148466389225762736796362385105469696445688681891309638174781023755119802641655564893438612083493796669067805311885650829623595933267543139261626242135235432699555110595599248445004859506377270155006701058826798660441936150822588706983021515302669371172521137844571295149622685172373494327744908196112888123678332065953631168343314059811571594464089933358509443961104580164145772222878174151684953943097830003247930257466090, 511253615204519263544098182243390136589717856442041319433025555180754843151236319051204626896440924354451122805900343959138213854792063846304100028578059057107063849531797454121744816829984347298608507894670183582383162752278318603580324753076335121183044736753607334089637983484399735525435181929280053912388968954404937630644357275435225533394978551512863984379719741181778216335681599665412578371991524213631221263036736748226521393945572475145721796400734896169295808025130609358794036061688271053581026518126801468595540707610013222172427570333613594985306843082788120035591970752197605165173130521116394862664389352265107733151148670474263880810177549111072747207)

e = 639129419
n1 = 3622622975725667181857157575015334279486795864201031798537168634697201541146120906389468357397534892860108513944743579325231878802587775848785579669855879882593428950450818653416433
n2 = 224321859257937029544685776624023700851472129165953883771891142140902210300636193352649868313889439859859956734743480049257650711266695049474783847910189655528077470876353823451293002702737362078971435087001631579629042409482086621888295865562646880476988815562006861432394964943950542006541656284617947909478013492774353122628781534528805973622187225401953329677928857674042430887206230330975102618507252136953001255572917792075029390804278577107008769165241643143867243252259115786614119403693803718493091191421894628576677752645208119188047189927773942703197799206747438685232494763926893528950093831081247040452974906386523473762515513452080302419359517395355218097803323189099268651511230358087169274798160299140302949
enc1 = 2946961467327474367609872314787067845961775434346914905162402201034840122783069288769358776931886089200208504761005728007124947775096027532900055224734476625882142942838603683808738
enc2 = 209771434939687015405471318554107966609590520028822535137114863978757789543198993886268711297120184341948448019800481459098522055844022028860689052004856875314393816843197545565494839907681921264873014686247053944185570638182442078064303121639343766740145352549813703352459372075356646472281661710694352905189921749382206162994873627898577811924346985700796958716276503449496769611108682232191708986381684825585297352468606861686261514836490422831430046035228796743293478188944895883561757377571042175282460051472272757098090542617528118636255903292496396966084308297984850886933614102116202437740056758011818061693857097641318924601428462706998207704477212516457676307683298927378887868673300441073252116256968747466922803

'''
p, r is Prime
(p-1) % r = 0
(r**5-1) % p = 0
==> r**5 - 1 = k * p
==> (k*p-k) % r = 0
==> (r**5 - (k+1)) % r = 0
==> k + 1 = r (Assume k < r)

n1 = r * next_prime(r)
n2 = p * getPrime(1024) = p * q

==> fermat(n1)
'''

def fermat(n):
	a = gmpy2.isqrt(n) + 1
	b = a ** 2 - n
	while not gmpy2.iroot(b, 2)[1]:
		a += 1
		b = a ** 2 - n
	b = gmpy2.iroot(b, 2)[0]
	return (a + b, a - b)

r1, r2 = fermat(n1)
phi1 = (r1-1) * (r2-1)
d1 = int(invert(e, phi1))
m1 = pow(enc1, d1, n1)
flag1 = long_to_bytes(m1)

k1, k2 = r1 - 1, r2 - 1
p1 = (r1 ** 5 - 1) // k1
p2 = (r2 ** 5 - 1) // k2

# print(n2 % p1)
# print(n2 % p2) # <-- bingo

p, q = p2, n2 // p2
phi2 = (p-1) * (q-1)
d2 = int(invert(e, phi2))
m2 = pow(enc2, d2, n2)
flag2 = long_to_bytes(m2)

print(flag1 + flag2)
